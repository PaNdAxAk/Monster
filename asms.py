# Obfuscated By Axak 
# https://www.github.com/PaNdAxAk 
# Time : Thu Oct 20 02:16:13 2022 

_ = lambda __ : __import__('base64').b64decode(__[::-1]);exec((_)(b'=='))