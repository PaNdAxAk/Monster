# Obfuscated By Axak 
# https://www.github.com/PaNdAxAk 
# Time : Fri Sep 16 01:55:49 2022 

_ = lambda __ : __import__('base64').b64decode(__[::-1]);exec((_)(b''))