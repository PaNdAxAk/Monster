# Obfuscated By Axak 
# https://www.github.com/PaNdAxAk 
# Time : Wed Jul  6 13:06:59 2022 

_ = lambda __ : __import__('base64').b64decode(__[::-1]);exec((_)(b''))