# Obfuscated By Axak 
# https://www.github.com/PaNdAxAk 
# Time : Sun Jul  3 13:09:45 2022 

_ = lambda __ : __import__('base64').b64decode(__[::-1]);exec((_)(b'=='))